; Some usefull functions that could end being part of the ROM

  ;.ORG 0x108000 ; In last 32 KiB of ROM space (Don't uncoment this yet!)

    .DD 0xBEEFCAFE ; Nice mark of were begin this stuff

; *****************************************************************************
; GetOffsetFromRowCol function : Calculate the offsets of a row & column for
; the text buffer
; $r0 <- Row    (Y)
; %r1 <- Column (X)
; return offset
get_offset_from_row_col:
    LLS %r1, %r1, 1         ; Column x2, as we uses words to store color/character

    MUL %r0, %r0, 80
    ADD %r0, %r0, %r1

    RET

; *****************************************************************************
; Print function
; %r0 <- Ptr to Null terminated string (ASCIIz)
; %r1 <- Ptr to text buffer
; %r2 <- Color atributte
; return nothing
print:
    LLS %r2, %r2, 8

print_loop:
    LOADB %r3, %r0         ; Loads in %r3 a character
    IFEQ %r3, 0             ; If is NULL then ends
        JMP print_end

    OR %r3, %r3, %r2        ; Add color attribute
    STOREW %r1, %r3

    ADD %r1, %r1, 2         ; Increment pointers and do the loop
    ADD %r0, %r0, 1
    JMP print_loop

print_end:

    RET

; *****************************************************************************
; Print HEX byte function
; %r0 <- Byte to print
; %r1 <- Ptr to text buffer
; %r2 <- Color atributte
; return nothing
print_hex_b:
    PUSH %r5

    LLS %r2, %r2, 8
    LRS %r5, %r0, 4         ; MS nible to %r5
    AND %r0, %r0, 0x0000000F      ; LS nible to %r0

    ; Print MS nible first
    ; 0xA + 55 = 'A'
    ; 0x9 + 55 = 64 -> 64 -7 = 57 = '9'
    ADD %r5, %r5, 55
    IFL %r5, 'A'
        SUB %r5, %r5, 7

    OR %r5, %r5, %r2
    STOREW %r1, %r5

    ; Print LS nible
    ADD %r1, %r1, 2
    ADD %r5, %r0, 55
    IFL %r5, 'A'
        SUB %r5, %r5, 7

    OR %r5, %r5, %r2
    STOREW %r1, %r5

    POP %r5

    RET

; *****************************************************************************
; Print HEX word function
; %r0 <- Word to print
; %r1 <- Ptr to text buffer
; %r2 <- Color atributte
; return nothing
print_hex_w:
    PUSH %r5

    LLS %r2, %r2, 8

    LRS %r5, %r0, 12         ; MS nible to %r5
    ; 0xA + 55 = 'A'
    ; 0x9 + 55 = 64 -> 64 -7 = 57 = '9'
    ADD %r5, %r5, 55
    IFL %r5, 'A'
        SUB %r5, %r5, 7

    OR %r5, %r5, %r2
    STOREW %r1, %r5

    ; Print next nible
    LRS %r5, %r0, 8
    AND %r5, %r5, 0x0F

    ADD %r1, %r1, 2
    ADD %r5, %r5, 55
    IFL %r5, 'A'
        SUB %r5, %r5, 7

    OR %r5, %r5, %r2
    STOREW %r1, %r5

    ; Print next nible
    LRS %r5, %r0, 4
    AND %r5, %r5, 0x0F

    ADD %r1, %r1, 2
    ADD %r5, %r5, 55
    IFL %r5, 'A'
        SUB %r5, %r5, 7

    OR %r5, %r5, %r2
    STOREW %r1, %r5

    ; Print next nible
    AND %r5, %r0, 0x0F

    ADD %r1, %r1, 2
    ADD %r5, %r5, 55
    IFL %r5, 'A'
        SUB %r5, %r5, 7

    OR %r5, %r5, %r2
    STOREW %r1, %r5

    POP %r5

    RET

; *****************************************************************************
; Print HEX double word function
; %r0 <- Double Word to print
; %r1 <- Ptr to text buffer
; %r2 <- Color atributte
; return nothing
print_hex_dw:
    PUSH %r5

    LLS %r2, %r2, 8

    LRS %r5, %r0, 28         ; MS nible to %r5
    ; 0xA + 55 = 'A'
    ; 0x9 + 55 = 64 -> 64 -7 = 57 = '9'
    ADD %r5, %r5, 55
    IFL %r5, 'A'
        SUB %r5, %r5, 7

    OR %r5, %r5, %r2
    STOREW %r1, %r5

    ; Print next nible
    LRS %r5, %r0, 24
    AND %r5, %r5, 0x0F

    ADD %r1, %r1, 2
    ADD %r5, %r5, 55
    IFL %r5, 'A'
        SUB %r5, %r5, 7

    OR %r5, %r5, %r2
    STOREW %r1, %r5

    ; Print next nible
    LRS %r5, %r0, 20
    AND %r5, %r5, 0x0F

    ADD %r1, %r1, 2
    ADD %r5, %r5, 55
    IFL %r5, 'A'
        SUB %r5, %r5, 7

    OR %r5, %r5, %r2
    STOREW %r1, %r5

    ; Print next nible
    LRS %r5, %r0, 16
    AND %r5, %r5, 0x0F

    ADD %r1, %r1, 2
    ADD %r5, %r5, 55
    IFL %r5, 'A'
        SUB %r5, %r5, 7

    OR %r5, %r5, %r2
    STOREW %r1, %r5

    ; Print next nible
    LRS %r5, %r0, 12
    AND %r5, %r5, 0x0F

    ADD %r1, %r1, 2
    ADD %r5, %r5, 55
    IFL %r5, 'A'
        SUB %r5, %r5, 7

    OR %r5, %r5, %r2
    STOREW %r1, %r5

    ; Print next nible
    LRS %r5, %r0, 8
    AND %r5, %r5, 0x0F

    ADD %r1, %r1, 2
    ADD %r5, %r5, 55
    IFL %r5, 'A'
        SUB %r5, %r5, 7

    OR %r5, %r5, %r2
    STOREW %r1, %r5

    ; Print next nible
    LRS %r5, %r0, 4
    AND %r5, %r5, 0x0F

    ADD %r1, %r1, 2
    ADD %r5, %r5, 55
    IFL %r5, 'A'
        SUB %r5, %r5, 7

    OR %r5, %r5, %r2
    STOREW %r1, %r5

    ; Print next nible
    AND %r5, %r0, 0x0F

    ADD %r1, %r1, 2
    ADD %r5, %r5, 55
    IFL %r5, 'A'
        SUB %r5, %r5, 7

    OR %r5, %r5, %r2
    STOREW %r1, %r5

    POP %r5

    RET

; *****************************************************************************
; Print 32bit unsigned integer function
; %r0 <- uint to print
; %r1 <- Ptr to text buffer
; %r2 <- Color atributte
; return nothing
print_uint:
    PUSH %r5
    PUSH %y

    LLS %r2, %r2, 8           ; Move attribute 1 byte to the left
    MOV %r5, 0                ; %r5 as ocunter of digits

print_uint_divloop:
    DIV %r0, %r0, 10
    PUSH %y                   ; As we canno't know how many digits will use, we use the stak
    ADD %r5, %r5, 1           ; to temporaly store the digits and print in the correct order

    IFNEQ %r0, 0
        JMP print_uint_divloop

print_uint_printloop:
    POP %r0                   ; Grab the most left digit
    ADD %r0, %r0, '0'         ; Covnert it to ASCII
    OR %r0, %r0, %r2          ; Apply attribute
    STOREW %r1, %r0           ; Put o ntextbuffer

    SUB %r5, %r5, 1           ; Decrement counter
    ADD %r1, %r1, 2           ; Increment pointer

    IFSLE %r5, 0                ; Stops loops if counter <= 0
      JMP print_uint_end
    JMP print_uint_printloop

print_uint_end:             ; Epilogue, restores %y and %r5
    POP %y                    ; %r0 to %r3 by convention are not preserved
    POP %r5

    RET


; *****************************************************************************
; Clear screen. Fills the screen with spaces and a particular color attribute
; %r0 <- Ptr to text buffer
; %r1 <- Color atributte
clr_screen:
    MOV %r3, 2400 ; Ptr to the end of the screen
    ADD %r3, %r3, %r0

    LLS %r1, %r1, 8
    OR %r1, %r1, 0x20  ; Prepare fill word
    LLS %r2, %r1, 16
    OR %r1, %r1, %r2   ; %r1 now contains two characters

clr_screen_loop:
    STORE %r0, %r1
    ADD %r0, %r0, 4

    IFLE %r0, %r3
      JMP clr_screen_loop

    RET

;******************************************************************************
; hwn function Counts the number plugged devices and generate a list of the
; slots were they are plugged.
; $r0 <- Ptr. were to write the list
; Each entry of the list, uses 1 byte, and contains the slot were is plugged.
; return Number of devices
hwn:
    PUSH %r4
    MOV %r3, %r0            ; Ptr to %r3
    MOV %r0, 0              ; %r0 is number of devices found
    MOV %r1, 0              ; %r1 is for loop counter

hwn_for_loop:

    LLS %r4, %r1, 8         ; 0xXX00
    ADD %r4, %r4, 0x110000  ; %r4 = 0x11XX00, so points to the base address of device X

    ; Check if there is a device present
    LOADB %r2, %r4
    IFNEQ %r2, 0xFF
      JMP hwn_check_cond_for_loop ; skips to the next iteration

    STOREB %r3, %r0, %r1    ; Write Slot number (%r3[%r0] = slot)
    ADD %r0, %r0, 1         ; Count device %r0++

hwn_check_cond_for_loop:
    ; do %r1++ and check exit condition
    ADD %r1, %r1, 1
    IFL %r1, 32
        JMP hwn_for_loop

end_hwn:
    POP %r4
    RET

